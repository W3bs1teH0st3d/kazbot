import discord
from discord.ext import commands
import sqlite3
import random
import time
from dotenv import load_dotenv

# –°–æ–∑–¥–∞–µ–º intents, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–∞—é—Ç –±–æ—Ç—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
intents = discord.Intents.default()
intents.message_content = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å intents
bot = commands.Bot(command_prefix='!', intents=intents)

YOUR_ADMIN_ID = 979011152795283456

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
def create_db():
    conn = sqlite3.connect("kazino.db")
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 0
        )
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–æ–Ω—É—Å–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bonuses (
            user_id INTEGER,
            bonus_type TEXT,
            last_claim INTEGER,
            PRIMARY KEY (user_id, bonus_type)
        )
    """)

    conn.commit()
    conn.close()

# –í—ã–∑–æ–≤–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
create_db()
print("[INFO] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")



# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_balance(user_id):
    conn = sqlite3.connect("kazino.db")
    cursor = conn.cursor()
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()
    if balance:
        return balance[0]
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        cursor.execute('INSERT INTO users (user_id, balance) VALUES (?, ?)', (user_id, 0))
        conn.commit()
        return 0
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    conn = sqlite3.connect("kazino.db")
    cursor = conn.cursor()
    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

@bot.command(name='cf')
async def coinflip(ctx, bet: int, choice: str):
    user_id = ctx.author.id
    balance = get_balance(user_id)
    if bet > balance:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")
        return
    result = random.choice(["–æ—Ä–µ–ª", "—Ä–µ—à–∫–∞"])
    if result == choice:
        update_balance(user_id, bet)
        await ctx.send(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ù–∞ –º–æ–Ω–µ—Ç–∫–µ –≤—ã–ø–∞–ª {result}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")
    else:
        update_balance(user_id, -bet)
        await ctx.send(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ù–∞ –º–æ–Ω–µ—Ç–∫–µ –≤—ã–ø–∞–ª {result}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

@bot.command(name='slots')
async def slots(ctx, bet: int):
    user_id = ctx.author.id
    balance = get_balance(user_id)
    if bet > balance:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")
        return
    symbols = ['üçí', 'üçä', 'üçâ', 'üçá', 'üçç']
    result = [random.choice(symbols) for _ in range(3)]
    if result[0] == result[1] == result[2]:
        winnings = bet * 10
        update_balance(user_id, winnings)
        await ctx.send(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]} {result[1]} {result[2]}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")
    else:
        update_balance(user_id, -bet)
        await ctx.send(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[0]} {result[1]} {result[2]}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

@bot.command(name='dice')
async def dice(ctx, bet: int, guess: int):
    user_id = ctx.author.id
    balance = get_balance(user_id)
    if bet > balance:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")
        return
    if not 1 <= guess <= 6:
        await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6 –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫—É–±–∏–∫.")
        return
    roll = random.randint(1, 6)
    if roll == guess:
        winnings = bet * 6
        update_balance(user_id, winnings)
        await ctx.send(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã–ø–∞–ª {roll}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")
    else:
        update_balance(user_id, -bet)
        await ctx.send(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í—ã–ø–∞–ª {roll}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–≥—Ä—ã HighLow
@bot.command(name='highlow')
async def highlow(ctx, bet: int, choice: str):
    user_id = ctx.author.id
    balance = get_balance(user_id)

    if bet > balance:
        await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")
        return

    if choice not in ['High', 'Low']:
        await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: 'High' –∏–ª–∏ 'Low'.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100
    number = random.randint(1, 100)
    result = 'High' if number >= 50 else 'Low'

    if choice == result:
        winnings = bet * 2
        update_balance(user_id, winnings)
        await ctx.send(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç! –ß–∏—Å–ª–æ: {number} ({result}). –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")
    else:
        update_balance(user_id, -bet)
        await ctx.send(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ß–∏—Å–ª–æ: {number} ({result}). –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.command(name='bal')
async def bal(ctx):
    user_id = ctx.author.id
    balance = get_balance(user_id)
    await ctx.send(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
def get_last_claim_time(user_id, bonus_type):
    conn = sqlite3.connect('kazino.db')
    cursor = conn.cursor()
    cursor.execute('SELECT last_claim FROM bonuses WHERE user_id = ? AND bonus_type = ?', (user_id, bonus_type))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
def update_last_claim_time(user_id, bonus_type):
    conn = sqlite3.connect('kazino.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO bonuses (user_id, bonus_type, last_claim) VALUES (?, ?, ?) ON CONFLICT(user_id, bonus_type) DO UPDATE SET last_claim = ?',
                   (user_id, bonus_type, int(time.time()), int(time.time())))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
@bot.command(name='daily')
async def daily(ctx):
    user_id = ctx.author.id
    last_claim = get_last_claim_time(user_id, "daily")
    current_time = int(time.time())

    if last_claim and current_time - last_claim < 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
        remaining_time = 86400 - (current_time - last_claim)
        hours, minutes = divmod(remaining_time // 60, 60)
        await ctx.send(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç.")
        return

    reward = random.randint(1000, 9000)
    update_balance(user_id, reward)
    update_last_claim_time(user_id, "daily")
    await ctx.send(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –º–æ–Ω–µ—Ç –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
@bot.command(name='hourly')
async def hourly(ctx):
    user_id = ctx.author.id
    last_claim = get_last_claim_time(user_id, "hourly")
    current_time = int(time.time())

    if last_claim and current_time - last_claim < 3600:  # 3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å
        remaining_time = 3600 - (current_time - last_claim)
        minutes, seconds = divmod(remaining_time, 60)
        await ctx.send(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.")
        return

    reward = random.randint(1000, 3000)
    update_balance(user_id, reward)
    update_last_claim_time(user_id, "hourly")
    await ctx.send(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –º–æ–Ω–µ—Ç –∑–∞ –±–æ–Ω—É—Å –∫–∞–∂–¥—ã–π —á–∞—Å! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")


# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç
@bot.command(name='givemoney')
async def givemoney(ctx, amount: int, user_id: int):
    if ctx.author.id != YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    update_balance(user_id, amount)
    await ctx.send(f"–í—ã –≤—ã–¥–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
@bot.command(name='takemoney')
async def takemoney(ctx, amount: int, user_id: int):
    if ctx.author.id != YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    update_balance(user_id, -amount)
    await ctx.send(f"–í—ã –∑–∞–±—Ä–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫—Ä–∞–∂–∏ –º–æ–Ω–µ—Ç
@bot.command(name='rob')
async def rob(ctx, amount: int, user_id: int):
    user_id_robber = ctx.author.id
    balance = get_balance(user_id_robber)
    if amount > balance:
        await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –∫—Ä–∞–∂–∏!")
        return
    chance = random.randint(1, 100)
    if chance <= 45:
        update_balance(user_id_robber, amount)
        update_balance(user_id, -amount)
        await ctx.send(f"–í—ã —É–∫—Ä–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id_robber)} –º–æ–Ω–µ—Ç.")
    else:
        update_balance(user_id_robber, -amount)
        await ctx.send(f"–í—ã –±—ã–ª–∏ –ø–æ–π–º–∞–Ω—ã –∑–∞ –∫—Ä–∞–∂–µ–π –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ {amount} –º–æ–Ω–µ—Ç. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id_robber)} –º–æ–Ω–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–º–æ—â–∏
@bot.command(name='helpkaz')
async def helpkaz(ctx):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - !bal - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å
    - !daily - –ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å (–æ—Ç 1–∫ –¥–æ 9–∫ –º–æ–Ω–µ—Ç)
    - !hourly - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∫–∞–∂–¥—ã–π —á–∞—Å (–æ—Ç 1–∫ –¥–æ 3–∫ –º–æ–Ω–µ—Ç)
    - !top - –¢–æ–ø 10 –±–æ–≥–∞—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    - !cf <—Å—Ç–∞–≤–∫–∞> <–æ—Ä–µ–ª/—Ä–µ—à–∫–∞> - –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏
    - !slots <—Å—Ç–∞–≤–∫–∞> - –ò–≥—Ä–æ–≤–æ–π –∞–≤—Ç–æ–º–∞—Ç
    - !dice <—Å—Ç–∞–≤–∫–∞> <—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6> - –ò–≥—Ä–æ–≤–æ–π –∫—É–±–∏–∫
    - !highlow <—Å—Ç–∞–≤–∫–∞> <high/low> - –°—Ç–∞–≤–∫–∞ –Ω–∞ –±–æ–ª—å—à–µ–µ –∏–ª–∏ –º–µ–Ω—å—à–µ–µ [!FIXING!]
    - !givemoney <—Å—É–º–º–∞> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)
    - !takemoney <—Å—É–º–º–∞> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)
    - !rob <—Å—É–º–º–∞> <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –£–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await ctx.send(help_text)

@bot.command(name='top')
async def top(ctx):
    conn = sqlite3.connect("kazino.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10")
    top_users = cursor.fetchall()
    conn.close()

    if not top_users:
        await ctx.send("–í —Ç–æ–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤
    leaderboard = "**üèÜ –¢–æ–ø 10 –±–æ–≥–∞—á–µ–π —Å–µ—Ä–≤–µ—Ä–∞ üèÜ**\n\n"
    for i, (user_id, balance) in enumerate(top_users, start=1):
        user = await bot.fetch_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        username = user.name if user else f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({user_id})"
        leaderboard += f"**{i}.** {username} ‚Äî {balance} –º–æ–Ω–µ—Ç\n"

    await ctx.send(leaderboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

if __name__ == "__main__":
    create_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot.run(DISCORD_TOKEN)


